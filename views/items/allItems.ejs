<% layout('layout/boilerplate') %>



    <div class="container-fluid align-items-center justify-content-center">
        <h1 class="font-weight-bold">Refractories And Consumables</h1>
    </div>
    <!-- 🔍 Live Search for Items -->

    <div class="mb-4 position-relative">
        <form action="/items/search" method="get" id="itemSearchForm" class="position-relative">
            <input type="search" id="itemSearch" name="item[itemName]" class="form-control form-control-lg shadow-sm" placeholder="Search by item, category, supplier or description..." autocomplete="off" />
            <!-- 🔽 Suggestions dropdown -->
            <div id="suggestionsWrapper" class="position-absolute w-100 shadow-sm bg-white rounded-3" style="z-index: 1000; display: none; top: 100%; left: 0;">
                <div class="d-flex justify-content-between align-items-center px-3 py-2 border-bottom">
                    <span class="fw-bold text-muted">Suggestions</span>
                    <button type="button" id="closeSuggestions" class="btn btn-sm btn-light border">
          <i class="bi bi-x-lg"></i>
        </button>
                </div>
                <ul id="suggestions" class="list-group list-group-flush mb-0"></ul>
            </div>
        </form>
    </div>






    <a class="btn btn-primary mt-3 mb-2" href="/items/inwards">Item Inwards</a>
    <a class="btn btn-secondary mt-3 mb-2" href="/items/outwards">Item Outwards</a>
    <a class="btn btn-warning mt-3 mb-2" href="/items/transactions">Item Transactions</a>
    <a class="btn btn-info mt-3 mb-2" href="/items/insights">Get Insights</a>

    <div class="container mt-4">
        <h1 class="mb-4 text-center">All Inventory Items</h1>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            <% items.forEach((item, index) => { %>
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <% if (item.itemImage && item.itemImage.length > 0) { %>
                            <img src="data:image/<%= item.itemImage[0].contentType %>;base64,<%= item.itemImage[0].data.toString('base64') %>" class="card-img-top" alt="<%= item.itemName %>" style="height: 250px; object-fit: contain; background-color: #f8f9fa;">
                            <% } else { %>
                                <img src="https://via.placeholder.com/400x300.png?text=No+Image" class="card-img-top" alt="Placeholder Image" style="height: 250px; object-fit: contain; background-color: #f8f9fa;">
                                <% } %>
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <%= item.itemName %>
                                        </h5>
                                        <h6 class="card-subtitle mb-2 text-muted">
                                            <%= item.itemCategoryName %>
                                        </h6>

                                        <p class="card-text">
                                            <%= item.itemDescription %>
                                        </p>
                                    </div>
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item"><strong>Supplier:</strong>
                                            <%= item.itemSupplier %>
                                        </li>
                                        <li class="list-group-item"><strong>Quantity:</strong>
                                            <%= item.itemQty %>
                                                <%= item.itemUnit %>
                                        </li>
                                        <li class="list-group-item"><strong>Daily Requirement:</strong>
                                            <%= item.life %>
                                                <%= item.itemUnit %>
                                        </li>
                                        <li class="list-group-item"><strong>Date Added:</strong>
                                            <%= item.formattedItemDate %>
                                        </li>
                                    </ul>
                                    <div class="card-body">
                                        <a href="/items/<%= item._id %>/edit" class="btn btn-info btn-sm">Edit</a>
                                        <form action="/items/<%= item._id %>?_method=DELETE" method="POST" class="d-inline">
                                            <button class="btn btn-danger btn-sm">Delete</button>
                                        </form>
                                    </div>
                    </div>
                </div>
                <% }) %>
        </div>
    </div>


    <!-- Scroll Buttons -->
    <!-- Floating Scroll Buttons -->
    <div style="position: fixed; bottom: 20px; right: 20px; z-index: 1050;">
        <button onclick="scrollToTop()" class="btn btn-outline-primary mb-2 rounded-circle shadow" title="Scroll to Top">
        <i class="bi bi-arrow-up"></i>
    </button>
        <br>
        <button onclick="scrollToBottom()" class="btn btn-outline-primary rounded-circle shadow" title="Scroll to Bottom">
        <i class="bi bi-arrow-down"></i>
    </button>
    </div>
    <div id="bottom"></div>

    <script>
        function filterTable() {
            // Get the value of the filter inputs
            var itemNameFilter = document.getElementById("itemNameFilter").value.toUpperCase();
            var itemCategoryFilter = document.getElementById("itemCategoryFilter").value.toUpperCase();

            // Get the table rows
            var rows = document.getElementById("dataTable").getElementsByTagName("tbody")[0].getElementsByTagName("tr");

            // Loop through the rows and hide those that do not match the filter
            for (var i = 0; i < rows.length; i++) {
                var itemName = rows[i].getElementsByTagName("td")[0].innerHTML.toUpperCase();
                var itemCategory = rows[i].getElementsByTagName("td")[5].innerHTML.toUpperCase();

                if (itemName.indexOf(itemNameFilter) > -1 && itemCategory.indexOf(itemCategoryFilter) > -1) {
                    rows[i].style.display = "";
                } else {
                    rows[i].style.display = "none";
                }
            }
        }
    </script>
    <script defer>
        document.addEventListener("DOMContentLoaded", function() {
            // Get today's date in the format yyyy-mm-dd
            const today = new Date().toISOString().split('T')[0];
            document.getElementById("itemDate").value = today;





            document.getElementById("itemDate").addEventListener("change", updateDateFromInput);
            document.addEventListener("keydown", handleKeyPress);
        });

        function decreaseDate(dateInputId) {
            updateDate(dateInputId, -1);
        }

        function increaseDate(dateInputId) {
            updateDate(dateInputId, 1);
        }

        function updateDate(dateInputId, deltaDays) {
            const dateInput = document.getElementById(dateInputId);
            const currentDate = new Date(dateInput.value);
            currentDate.setDate(currentDate.getDate() + deltaDays);
            dateInput.value = currentDate.toISOString().split('T')[0];
        }

        function updateDateFromInput() {
            const itemDate = document.getElementById("itemDate");

            const enteredDate = new Date(itemDate.value);
            if (!isNaN(enteredDate.getTime())) {
                // Valid date entered, update the input value
                itemDate.value = enteredDate.toISOString().split('T')[0];
            } else {
                // Invalid date entered, revert to the previous value
                const currentDate = new Date();
                itemDate.value = currentDate.toISOString().split('T')[0];
            }


        }

        function handleKeyPress(event) {
            const focusedElement = document.activeElement;

            // Check if the key pressed is the up or down arrow
            if (event.key === "ArrowUp" || event.key === "ArrowDown") {
                if (focusedElement.id === "itemDate") {
                    if (event.key === "ArrowUp") {
                        increaseDate("itemDate");
                    } else if (event.key === "ArrowDown") {
                        decreaseDate("itemDate");
                    }
                }
            }
        }
    </script>
    <script>
        function scrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        function scrollToBottom() {
            document.getElementById("bottom").scrollIntoView({
                behavior: "smooth"
            });
        }
    </script>

    <!-- <script>
        const searchInput = document.getElementById("itemSearch");
        const suggestionsBox = document.getElementById("suggestions");

        searchInput.addEventListener("input", function() {
            const query = this.value.trim();
            if (query.length < 1) {
                suggestionsBox.style.display = "none";
                return;
            }

            const xhr = new XMLHttpRequest();
            xhr.open("GET", `/items/suggestions?q=${encodeURIComponent(query)}`, true);
            xhr.onload = function() {
                if (xhr.status === 200) {
                    const suggestions = JSON.parse(xhr.responseText);
                    displaySuggestions(suggestions, query);
                }
            };
            xhr.send();
        });

        function displaySuggestions(suggestions, query) {
            suggestionsBox.innerHTML = "";
            if (!suggestions.length) {
                suggestionsBox.style.display = "none";
                return;
            }

            suggestions.forEach((item) => {
                const li = document.createElement("li");
                li.className = "list-group-item list-group-item-action";

                const regex = new RegExp(`(${query})`, "ig");
                const highlightedName = item.itemName.replace(
                    regex,
                    "<strong>$1</strong>"
                );

                li.innerHTML = `${highlightedName} <small class="text-muted d-block">${item.itemCategoryName || ""}</small>`;

                li.addEventListener("click", function() {
                    searchInput.value = item.itemName;
                    suggestionsBox.style.display = "none";
                    document.getElementById("itemSearchForm").submit();
                });

                suggestionsBox.appendChild(li);
            });

            suggestionsBox.style.display = "block";
        }

        // Hide dropdown when clicking outside
        document.addEventListener("click", (e) => {
            if (!e.target.closest("#suggestions") && e.target !== searchInput) {
                suggestionsBox.style.display = "none";
            }
        });
    </script> -->
    <script>
        const searchInput = document.getElementById("itemSearch");
        const suggestionsBox = document.getElementById("suggestions");
        const suggestionsWrapper = document.getElementById("suggestionsWrapper");
        const closeBtn = document.getElementById("closeSuggestions");

        searchInput.addEventListener("input", function() {
            const query = this.value.trim();
            if (query.length < 1) {
                suggestionsWrapper.style.display = "none";
                return;
            }

            fetch(`/items/suggestions?q=${encodeURIComponent(query)}`)
                .then((res) => res.json())
                .then((suggestions) => {
                    displaySuggestions(suggestions, query);
                })
                .catch((err) => console.error("Error fetching suggestions:", err));
        });

        function displaySuggestions(suggestions, query) {
            suggestionsBox.innerHTML = "";
            if (!suggestions.length) {
                suggestionsBox.innerHTML = `<li class="list-group-item text-muted">No results found</li>`;
                suggestionsWrapper.style.display = "block";
                return;
            }

            const regex = new RegExp(`(${query})`, "ig");
            suggestions.forEach((item) => {
                const li = document.createElement("li");
                li.className = "list-group-item list-group-item-action";

                const highlighted = item.itemName.replace(regex, "<strong>$1</strong>");
                li.innerHTML = `${highlighted}<br><small class="text-muted">${item.itemCategoryName || ""}</small>`;

                li.addEventListener("click", function() {
                    searchInput.value = item.itemName;
                    suggestionsWrapper.style.display = "none";
                    document.getElementById("itemSearchForm").submit();
                });

                suggestionsBox.appendChild(li);
            });

            suggestionsWrapper.style.display = "block";
        }

        // Close dropdown when clicking "×" button
        closeBtn.addEventListener("click", () => {
            suggestionsWrapper.style.display = "none";
        });

        // Hide dropdown when clicking outside
        document.addEventListener("click", (e) => {
            if (!searchInput.contains(e.target) &&
                !suggestionsWrapper.contains(e.target)
            ) {
                suggestionsWrapper.style.display = "none";
            }
        });
    </script>

    <style>
        #suggestions li:hover {
            background-color: #f8f9fa;
            cursor: pointer;
        }
        
        #closeSuggestions i {
            font-size: 0.9rem;
        }
    </style>

    <style>
        mark {
            background-color: #ffed9b;
            padding: 0 2px;
            border-radius: 2px;
        }
        
        #itemSuggestions li:hover {
            background-color: #f8f9fa;
            cursor: pointer;
        }
    </style>